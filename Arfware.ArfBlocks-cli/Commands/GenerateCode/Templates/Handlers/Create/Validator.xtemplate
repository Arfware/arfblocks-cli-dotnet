namespace TodoApp.Application.RequestHandlers.{{PluralObjectName}}.{{PluralEndpointType}}.{{ActionName}};

public class Validator : IRequestValidator
{
	private readonly DbValidationService _dbValidator;

	public Validator(ArfBlocksDependencyProvider dependencyProvider)
	{
		_dbValidator = dependencyProvider.GetInstance<DbValidationService>();
	}

	public void ValidateRequestModel(IRequestModel payload, CancellationToken cancellationToken)
	{
		// Get Request Payload
		var requestPayload = (RequestModel)payload;

		// Request Model Validation
		var validationResult = new RequestModel_Validator().Validate(requestPayload);
		if (!validationResult.IsValid)
		{
			var errors = validationResult.ToString("~");
			throw new ArfBlocksValidationException(errors);
		}
	}

	public async Task ValidateDomain(IRequestModel payload, CancellationToken cancellationToken)
	{
		// Get Request Payload
		var requestPayload = (RequestModel)payload;

		// NOP:
		await Task.CompletedTask;
	}
}

public class RequestModel_Validator : AbstractValidator<RequestModel>
{
	public RequestModel_Validator()
	{
		#repeatable-start-requestModelProperties#
		RuleFor(x => x.{{PropertyName}})
			.NotNull().WithMessage(ValidationErrors.{{PureObjectName}}Errors.{{PropertyName}}NotValid)
			.NotEmpty().WithMessage(ValidationErrors.{{PureObjectName}}Errors.{{PropertyName}}NotValid);
		#repeatable-end-requestModelProperties#
	}
}